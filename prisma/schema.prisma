generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  username       String?
  email          String
  profilePicture String?
  clerkId        String  @unique
  isPaid         Boolean @default(false)
  payment        Payment @default(NONE)

  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  Event               Event[]
  Organization        Organization[]
  OrganizationMembers Member[]
  Feedback            Feedback[]
}

model Event {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  key     String   @unique
  dueDate DateTime

  creatorId      String       @db.ObjectId
  creator        User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [key], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Organization {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @default("UNTITLED")
  key  String @unique

  creatorId String @db.ObjectId
  user      User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  imageUrl  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members Member[]
  events  Event[]

  @@index([creatorId])
}

model Member {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  role ROLE @default(GUEST)

  userId         String       @db.ObjectId
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId String       @db.ObjectId
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([organizationId])
}

model Feedback {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  message String
  User    User?  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum ROLE {
  GUEST
  ADMIN
  MODERATOR
}

enum Payment {
  NONE
  MONTHLY
  YEARLY
  FOREVER
}
